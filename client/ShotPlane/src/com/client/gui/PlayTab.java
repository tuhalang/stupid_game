/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.client.gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.regex.Matcher;

/**
 *
 * @author ADMIN
 */
public class PlayTab extends javax.swing.JFrame {

    private ShotPlaneDisplayConponent gameDisplayComponent;
    private Plane plane = new Plane(6, 5, 6, 8);
    private GridBagConstraints constraints;
    private PrintWriter pw;                                     // for Chat
    private boolean serverIsReady = false;
    private boolean clientIsReady = false;
    
    /**
     * Creates new form MainInterface
     */
    public PlayTab() {
        initComponents();
        InetAddress localhostAddress = null;
        try {
            localhostAddress = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        if (localhostAddress != null) {
            ipField.setText(localhostAddress.getHostAddress());
        }
        gameDisplayComponent = new ShotPlaneDisplayConponent(plane);
        singleInterface.add(gameDisplayComponent);
        playMainInterface.setVisible(true);
        singleInterface.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        version = new java.awt.Label();
        jSeparator1 = new javax.swing.JSeparator();
        menuBar = new javax.swing.JPanel();
        lblPlay = new javax.swing.JLabel();
        lblDashboard = new javax.swing.JLabel();
        lblRecord = new javax.swing.JLabel();
        lblUserInfo = new javax.swing.JLabel();
        lblAboutUs = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        playMainInterface = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        lblSelectMode = new javax.swing.JLabel();
        btnMultiplayer = new javax.swing.JButton();
        btnSingle = new javax.swing.JButton();
        lblCopyRight = new java.awt.Label();
        lblHelp = new javax.swing.JLabel();
        singleInterface = new javax.swing.JPanel();
        welcome = new javax.swing.JTextField();
        up_down = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        directionPanel = new javax.swing.JPanel();
        rightButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        rotate2 = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        rotate1 = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        controlPanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        portField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ipField = new javax.swing.JTextField();
        lblIpField = new javax.swing.JLabel();
        left_right = new javax.swing.JSplitPane();
        dis_input = new javax.swing.JPanel();
        chatDisplayWindow = new javax.swing.JScrollPane();
        chatDisplayArea = new javax.swing.JTextArea();
        lblChatDisplayArea = new javax.swing.JLabel();
        lblChatInputArea = new javax.swing.JLabel();
        chatInputWindow = new javax.swing.JScrollPane();
        chatInputArea = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        statusButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SMART GAME by tuhalang ft nhanbka");
        setMinimumSize(new java.awt.Dimension(780, 425));
        setResizable(false);

        version.setFont(new java.awt.Font("Calibri", 3, 12)); // NOI18N
        version.setText("VERSION 1.0");

        menuBar.setBackground(new java.awt.Color(203, 234, 245));
        menuBar.setMaximumSize(new java.awt.Dimension(98, 393));
        menuBar.setMinimumSize(new java.awt.Dimension(98, 393));

        lblPlay.setBackground(new java.awt.Color(132, 206, 232));
        lblPlay.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        lblPlay.setText("Play");
        lblPlay.setAlignmentX(1.0F);
        lblPlay.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        lblPlay.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        lblPlay.setOpaque(true);

        lblDashboard.setBackground(new java.awt.Color(203, 234, 245));
        lblDashboard.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblDashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dashboard.png"))); // NOI18N
        lblDashboard.setText("Dashboard");
        lblDashboard.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        lblDashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblDashboard.setOpaque(true);

        lblRecord.setBackground(new java.awt.Color(203, 234, 245));
        lblRecord.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/record.png"))); // NOI18N
        lblRecord.setText("Record");
        lblRecord.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        lblRecord.setOpaque(true);

        lblUserInfo.setBackground(new java.awt.Color(203, 234, 245));
        lblUserInfo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblUserInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user.png"))); // NOI18N
        lblUserInfo.setText("User Info");
        lblUserInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        lblUserInfo.setOpaque(true);

        lblAboutUs.setBackground(new java.awt.Color(203, 234, 245));
        lblAboutUs.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblAboutUs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/about_us.png"))); // NOI18N
        lblAboutUs.setText("About Us");
        lblAboutUs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        lblAboutUs.setOpaque(true);

        javax.swing.GroupLayout menuBarLayout = new javax.swing.GroupLayout(menuBar);
        menuBar.setLayout(menuBarLayout);
        menuBarLayout.setHorizontalGroup(
            menuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 98, Short.MAX_VALUE)
            .addComponent(lblPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblUserInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblAboutUs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        menuBarLayout.setVerticalGroup(
            menuBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBarLayout.createSequentialGroup()
                .addComponent(lblPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblUserInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lblAboutUs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 143, Short.MAX_VALUE))
        );

        jLayeredPane1.setBackground(new java.awt.Color(132, 206, 232));
        jLayeredPane1.setOpaque(true);

        playMainInterface.setBackground(new java.awt.Color(132, 206, 232));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(132, 206, 232));
        jTextField1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTextField1.setText("Hello");
        jTextField1.setBorder(null);

        lblSelectMode.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        lblSelectMode.setText("Select Mode");

        btnMultiplayer.setBackground(new java.awt.Color(253, 233, 250));
        btnMultiplayer.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnMultiplayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/multiplayer.png"))); // NOI18N
        btnMultiplayer.setText("Multiplayer");
        btnMultiplayer.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 15, 1, 1)));
        btnMultiplayer.setBorderPainted(false);
        btnMultiplayer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnMultiplayer.setMargin(new java.awt.Insets(2, 10, 2, 10));
        btnMultiplayer.setName("btnMultiplayer"); // NOI18N

        btnSingle.setBackground(new java.awt.Color(253, 233, 250));
        btnSingle.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        btnSingle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/single_player.png"))); // NOI18N
        btnSingle.setText("Single");
        btnSingle.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 15, 1, 1)));
        btnSingle.setBorderPainted(false);
        btnSingle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSingle.setMargin(new java.awt.Insets(2, 10, 2, 10));
        btnSingle.setName("btnSingle"); // NOI18N
        btnSingle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSingleMouseClicked(evt);
            }
        });

        lblCopyRight.setAlignment(java.awt.Label.CENTER);
        lblCopyRight.setEnabled(false);
        lblCopyRight.setMaximumSize(new java.awt.Dimension(220, 20));
        lblCopyRight.setText("Copyrights 2020 @ All Rights Reserved");

        lblHelp.setFont(new java.awt.Font("Calibri Light", 0, 12)); // NOI18N
        lblHelp.setForeground(new java.awt.Color(241, 53, 0));
        lblHelp.setText("Need Help?");

        javax.swing.GroupLayout playMainInterfaceLayout = new javax.swing.GroupLayout(playMainInterface);
        playMainInterface.setLayout(playMainInterfaceLayout);
        playMainInterfaceLayout.setHorizontalGroup(
            playMainInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playMainInterfaceLayout.createSequentialGroup()
                .addGroup(playMainInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playMainInterfaceLayout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(lblCopyRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                        .addComponent(lblHelp))
                    .addGroup(playMainInterfaceLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(playMainInterfaceLayout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addGroup(playMainInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSingle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSelectMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMultiplayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        playMainInterfaceLayout.setVerticalGroup(
            playMainInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playMainInterfaceLayout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(playMainInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playMainInterfaceLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(lblSelectMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMultiplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSingle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addComponent(lblCopyRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(playMainInterfaceLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblHelp)))
                .addGap(34, 34, 34))
        );

        singleInterface.setBackground(new java.awt.Color(132, 206, 232));
        singleInterface.setMaximumSize(new java.awt.Dimension(684, 394));
        singleInterface.setMinimumSize(new java.awt.Dimension(684, 394));

        welcome.setEditable(false);
        welcome.setBackground(new java.awt.Color(132, 206, 232));
        welcome.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        welcome.setText("Hello");
        welcome.setBorder(null);

        up_down.setDividerLocation(291);
        up_down.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane2.setBackground(new java.awt.Color(132, 206, 232));
        jSplitPane2.setBorder(null);
        jSplitPane2.setDividerLocation(410);

        directionPanel.setBackground(new java.awt.Color(99, 181, 218));
        directionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rightButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconfinder_arrow-right.png"))); // NOI18N

        downButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconfinder_arrow-down.png"))); // NOI18N
        downButton.setText("Down");

        rotate2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        rotate2.setText(">>");

        upButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconfinder_arrow-up.png"))); // NOI18N
        upButton.setText("Up");
        upButton.setMaximumSize(new java.awt.Dimension(85, 25));
        upButton.setMinimumSize(new java.awt.Dimension(85, 25));
        upButton.setPreferredSize(new java.awt.Dimension(85, 25));

        rotate1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        rotate1.setText("<<");

        leftButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconfinder_arrow-left.png"))); // NOI18N

        javax.swing.GroupLayout directionPanelLayout = new javax.swing.GroupLayout(directionPanel);
        directionPanel.setLayout(directionPanelLayout);
        directionPanelLayout.setHorizontalGroup(
            directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directionPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(directionPanelLayout.createSequentialGroup()
                        .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(downButton)
                        .addGap(5, 5, 5)
                        .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(directionPanelLayout.createSequentialGroup()
                        .addComponent(rotate1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(rotate2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        directionPanelLayout.setVerticalGroup(
            directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, directionPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotate2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotate1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(directionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        rightButton.getAccessibleContext().setAccessibleName("Right");
        leftButton.getAccessibleContext().setAccessibleName("Left");

        jSplitPane2.setRightComponent(directionPanel);

        controlPanel.setBackground(new java.awt.Color(99, 181, 218));
        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        connectButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel1.setText("Port:");

        ipField.setEnabled(false);

        lblIpField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblIpField.setLabelFor(ipField);
        lblIpField.setText("IP:");

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIpField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectButton)
                .addGap(12, 12, 12))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIpField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jSplitPane2.setLeftComponent(controlPanel);

        up_down.setBottomComponent(jSplitPane2);

        left_right.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        left_right.setDividerLocation(300);

        dis_input.setBackground(new java.awt.Color(99, 181, 218));
        dis_input.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chatDisplayArea.setEditable(false);
        chatDisplayArea.setColumns(20);
        chatDisplayArea.setRows(5);
        chatDisplayWindow.setViewportView(chatDisplayArea);

        lblChatDisplayArea.setLabelFor(chatDisplayArea);
        lblChatDisplayArea.setText("Your dialouge");

        lblChatInputArea.setLabelFor(chatInputArea);
        lblChatInputArea.setText("Your Message");

        chatInputArea.setColumns(20);
        chatInputArea.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        chatInputArea.setLineWrap(true);
        chatInputArea.setRows(5);
        chatInputArea.setMaximumSize(new java.awt.Dimension(158, 78));
        chatInputArea.setMinimumSize(new java.awt.Dimension(158, 78));
        chatInputArea.setPreferredSize(new java.awt.Dimension(158, 78));
        chatInputWindow.setViewportView(chatInputArea);

        btnSend.setText("SEND");
        btnSend.setMaximumSize(new java.awt.Dimension(59, 84));
        btnSend.setMinimumSize(new java.awt.Dimension(59, 84));
        btnSend.setPreferredSize(new java.awt.Dimension(59, 84));

        statusButton.setEnabled(false);

        okButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(224, 25));
        okButton.setMinimumSize(new java.awt.Dimension(224, 25));
        okButton.setPreferredSize(new java.awt.Dimension(224, 25));

        javax.swing.GroupLayout dis_inputLayout = new javax.swing.GroupLayout(dis_input);
        dis_input.setLayout(dis_inputLayout);
        dis_inputLayout.setHorizontalGroup(
            dis_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dis_inputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dis_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chatDisplayWindow)
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(dis_inputLayout.createSequentialGroup()
                        .addGroup(dis_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChatInputArea)
                            .addComponent(lblChatDisplayArea)
                            .addComponent(statusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(dis_inputLayout.createSequentialGroup()
                        .addComponent(chatInputWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        dis_inputLayout.setVerticalGroup(
            dis_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dis_inputLayout.createSequentialGroup()
                .addComponent(lblChatDisplayArea)
                .addGap(0, 0, 0)
                .addComponent(chatDisplayWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblChatInputArea)
                .addGap(0, 0, 0)
                .addGroup(dis_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatInputWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        left_right.setRightComponent(dis_input);

        up_down.setLeftComponent(left_right);

        javax.swing.GroupLayout singleInterfaceLayout = new javax.swing.GroupLayout(singleInterface);
        singleInterface.setLayout(singleInterfaceLayout);
        singleInterfaceLayout.setHorizontalGroup(
            singleInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(singleInterfaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, singleInterfaceLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(up_down, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        singleInterfaceLayout.setVerticalGroup(
            singleInterfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(singleInterfaceLayout.createSequentialGroup()
                .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(up_down, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(playMainInterface, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(singleInterface, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playMainInterface, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(singleInterface, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(playMainInterface, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 75, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(singleInterface, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1))
            .addGroup(layout.createSequentialGroup()
                .addComponent(menuBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void btnSingleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSingleMouseClicked
        // initialize the single player mode
        playMainInterface.setVisible(false);
        ipField.setEditable(true);
        singleInterface.setVisible(true);
        gameDisplayComponent = new ShotPlaneDisplayConponent(plane);
        constraints = new GridBagConstraints();
        left_right.setLeftComponent(gameDisplayComponent);
        
        ActionListener moveListener = new ButtonAction();
        leftButton.addActionListener(moveListener);
        upButton.addActionListener(moveListener);
        downButton.addActionListener(moveListener);
        rightButton.addActionListener(moveListener);
        okButton.addActionListener(moveListener);

        rotate1.addActionListener(moveListener);
        rotate2.addActionListener(moveListener);
    }//GEN-LAST:event_btnSingleMouseClicked

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayTab().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMultiplayer;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSingle;
    private javax.swing.JTextArea chatDisplayArea;
    private javax.swing.JScrollPane chatDisplayWindow;
    private javax.swing.JTextArea chatInputArea;
    private javax.swing.JScrollPane chatInputWindow;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel directionPanel;
    private javax.swing.JPanel dis_input;
    private javax.swing.JButton downButton;
    private javax.swing.JTextField ipField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblAboutUs;
    private javax.swing.JLabel lblChatDisplayArea;
    private javax.swing.JLabel lblChatInputArea;
    private java.awt.Label lblCopyRight;
    private javax.swing.JLabel lblDashboard;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblIpField;
    private javax.swing.JLabel lblPlay;
    private javax.swing.JLabel lblRecord;
    private javax.swing.JLabel lblSelectMode;
    private javax.swing.JLabel lblUserInfo;
    private javax.swing.JButton leftButton;
    private javax.swing.JSplitPane left_right;
    private javax.swing.JPanel menuBar;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel playMainInterface;
    private javax.swing.JTextField portField;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton rotate1;
    private javax.swing.JButton rotate2;
    private javax.swing.JPanel singleInterface;
    private javax.swing.JButton statusButton;
    private javax.swing.JButton upButton;
    private javax.swing.JSplitPane up_down;
    private java.awt.Label version;
    private javax.swing.JTextField welcome;
    // End of variables declaration//GEN-END:variables

    /*
     *
     *      Declare nested class to handle event
     *
     *
    */
    private class ButtonAction implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            String input = event.getActionCommand();
            System.out.println(input);
            if ("Left".equals(input)) {
                Point head = plane.getHead();
                Point tail = plane.getTail();
                boolean e1 = head.getX() == tail.getX() && head.getX() > 2;
                boolean e2 = head.getY() == tail.getY() && head.getX() > 0 && tail.getX() > 0;
                if (e1 | e2) {
                    plane = new Plane(head.getX() - 1, head.getY(), tail.getX() - 1, tail.getY());
                    gameDisplayComponent.setPlane(plane);
                    gameDisplayComponent.repaint();
                }
            }
            if ("Right".equals(input)) {
                Point head = plane.getHead();
                Point tail = plane.getTail();
                boolean e1 = head.getX() == tail.getX() && head.getX() < 11;
                boolean e2 = head.getY() == tail.getY() && head.getX() < 13 && tail.getX() < 13;
                if (e1 | e2) {
                    plane = new Plane(head.getX() + 1, head.getY(), tail.getX() + 1, tail.getY());
                    gameDisplayComponent.setPlane(plane);
                    gameDisplayComponent.repaint();
                }
            }
            if ("Up".equals(input)) {
                Point head = plane.getHead();
                Point tail = plane.getTail();
                boolean e1 = head.getX() == tail.getX() && head.getY() > 0 && tail.getY() > 0;
                boolean e2 = head.getY() == tail.getY() && head.getY() > 2;
                if (e1 | e2) {
                    plane = new Plane(head.getX(), head.getY() - 1, tail.getX(), tail.getY() - 1);
                    gameDisplayComponent.setPlane(plane);
                    gameDisplayComponent.repaint();
                }
            }
            if ("Down".equals(input)) {
                Point head = plane.getHead();
                Point tail = plane.getTail();
                boolean e1 = head.getX() == tail.getX() && head.getY() < 13 && tail.getY() < 13;
                boolean e2 = head.getY() == tail.getY() && head.getY() < 11;
                if (e1 | e2) {
                    plane = new Plane(head.getX(), head.getY() + 1, tail.getX(), tail.getY() + 1);
                    gameDisplayComponent.setPlane(plane);
                    gameDisplayComponent.repaint();
                }
            }
            if ("<<".equals(input)) {
                Point head = plane.getHead();
                Point tail = plane.getTail();
                if (head.getX() == tail.getX() && head.getY() < tail.getY()) {
                    double x1 = head.getX() - 1;
                    double y = head.getY() + 1;
                    double x2 = tail.getX() + 2;
                    if (y == 1) y++;
                    plane = new Plane(x1, y, x2, y);
                } else if (head.getX() == tail.getX() && head.getY() > tail.getY()) {
                    double x1 = head.getX() + 1;
                    double y = head.getY() - 1;
                    double x2 = tail.getX() - 2;
                    if (y == 12) y--;
                    plane = new Plane(x1, y, x2, y);
                } else if (head.getY() == tail.getY() && head.getX() > tail.getX()) {
                    double x = head.getX() - 1;
                    double y1 = head.getY() - 1;
                    double y2 = tail.getY() + 2;
                    if (x == 12) x--;
                    plane = new Plane(x, y1, x, y2);
                } else if (head.getY() == tail.getY() && head.getX() < tail.getX()) {
                    System.out.println("hh");
                    double x = head.getX() + 1;
                    double y1 = head.getY() + 1;
                    double y2 = tail.getY() - 2;
                    if (x == 1) x++;
                    plane = new Plane(x, y1, x, y2);
                }
                gameDisplayComponent.setPlane(plane);
                gameDisplayComponent.repaint();
            }
            if (">>".equals(input)) {
                Point head = plane.getHead();
                Point tail = plane.getTail();
                if (head.getX() == tail.getX() && head.getY() > tail.getY()) {
                    double x1 = head.getX() - 1;
                    double y = head.getY() - 1;
                    double x2 = tail.getX() + 2;
                    if (y == 12) y--;
                    plane = new Plane(x1, y, x2, y);
                } else if (head.getX() == tail.getX() && head.getY() < tail.getY()) {
                    double x1 = head.getX() + 1;
                    double y = head.getY() + 1;
                    double x2 = tail.getX() - 2;
                    if (y == 1) y++;
                    plane = new Plane(x1, y, x2, y);
                } else if (head.getY() == tail.getY() && head.getX() < tail.getX()) {
                    double x = head.getX() + 1;
                    double y1 = head.getY() - 1;
                    double y2 = tail.getY() + 2;
                    if (x == 1) x++;
                    plane = new Plane(x, y1, x, y2);
                } else if (head.getY() == tail.getY() && head.getX() > tail.getX()) {
                    double x = head.getX() - 1;
                    double y1 = head.getY() + 1;
                    double y2 = tail.getY() - 2;
                    if (x == 12) x--;
                    plane = new Plane(x, y1, x, y2);
                }
                gameDisplayComponent.setPlane(plane);
                gameDisplayComponent.repaint();
            }
            if ("OK".equals(input)) {
                for (int i = 0; i < 14; i++) {
                    for (int j = 0; j < 14; j++) {
                        Rectangle2D rectangle2D = new Rectangle(10 + i * 20, 10 + j * 20, 20, 20);
                        gameDisplayComponent.addSquare(rectangle2D, new Color(54, 63, 61));
                    }
                }
                gameDisplayComponent.disablePlane();
                gameDisplayComponent.repaint();
                gameDisplayComponent.addPrintWirter(pw);
                if (serverIsReady) {
                    pw.println("game begin");
                    chatDisplayArea.append("game begin!\n");
                    chatDisplayArea.setCaretPosition(chatDisplayArea.getDocument().getLength());
                    gameDisplayComponent.enableComponent();
                    statusButton.setBackground(Color.GREEN);
                } else {
                    pw.println("client is ready");
                }
            }
        }
    }
    
    
    private class ConnectAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            String ip = ipField.getText().trim();

            int port = Integer.parseInt(portField.getText().trim());
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        Socket s = new Socket(ip, port);
                        InputStreamReader isr = new InputStreamReader(s.getInputStream());
                        BufferedReader br = new BufferedReader(isr);
                        pw = new PrintWriter(s.getOutputStream(), true);

                        chatDisplayArea.append("client has connected to server\n");
                        chatDisplayArea.append("put the plane and press OK Button to begin game\n");
                        while (true) {
                            String info = br.readLine();
                            if ("server is ready".equals(info)) {
                                serverIsReady = true;
                                chatDisplayArea.append("Opponent is ready\n");
                            } else if ("game begin".equals(info)) {
                                chatDisplayArea.append("Game begin!\n");
                                statusButton.setBackground(Color.GREEN);
                                gameDisplayComponent.enableComponent();
                            } else if (Util.isHitAction(info)) {
                                Matcher m = Util.HITPATTER.matcher(info);
                                int x = -1;
                                int y = -1;
                                if (m.find()) {
                                    x = Integer.parseInt(m.group(1));
                                    y = Integer.parseInt(m.group(2));
                                }

                                Point p = new Point(x, y);

                                if (Util.ifHitDownPlane(plane, p)) {
                                    pw.println("hitResponse:" + x + ":" + y + ":2");
                                } else if (Util.ifHitPlane(plane, p)) {
                                    pw.println("hitResponse:" + x + ":" + y + ":1");
                                } else {
                                    pw.println("hitResponse:" + x + ":" + y + ":0");
                                }

                                gameDisplayComponent.enableComponent();
                                statusButton.setBackground(Color.GREEN);

                            } else if (Util.isHitResponseAction(info)) {
                                Matcher m = Util.RESPONSEPATTERN.matcher(info);
                                int x = -1, y = -1, result = -1;
                                if (m.find()) {
                                    x = Integer.parseInt(m.group(1));
                                    y = Integer.parseInt(m.group(2));
                                    result = Integer.parseInt(m.group(3));
                                }
                                Rectangle2D rectangle2D = new Rectangle2D.Double(x * 20 + 10, y * 20 + 10, 20, 20);
                                switch (result) {
                                    case 0: {
                                        gameDisplayComponent.putRectangle(rectangle2D, Color.WHITE);
                                        chatDisplayArea.append("does not hit the plane\n");
                                        break;
                                    }
                                    case 1: {
                                        gameDisplayComponent.putRectangle(rectangle2D, Color.BLUE);
                                        chatDisplayArea.append("hit the body of the plane\n");
                                        break;
                                    }
                                    case 2: {
                                        gameDisplayComponent.putRectangle(rectangle2D, Color.BLUE);
                                        chatDisplayArea.append("hit down the plane, you win\n");
                                        break;
                                    }
                                    default:
                                        break;
                                }
                                gameDisplayComponent.repaint();
                                gameDisplayComponent.disableComponent();
                                statusButton.setBackground(Color.WHITE);
                            } else {
                                chatDisplayArea.append("server:  " + info + "\r\n");
                            }
                            chatDisplayArea.setCaretPosition(chatDisplayArea.getDocument().getLength());
                        }
                    } catch (UnknownHostException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
            ipField.setEnabled(false);
            portField.setEnabled(false);
            ipField.setDisabledTextColor(Color.BLACK);
            portField.setDisabledTextColor(Color.BLACK);
            connectButton.setEnabled(false);
        }
    }
    
    
}
